using System;
using System.Linq;
using UnityEditor;
using UnityEngine;
using UnityEngine.SceneManagement;
using Object = UnityEngine.Object;

namespace Experiment.NoobAutoLinker.Editor
{
    public class AutoLinkerEditor : EditorWindow
    {
        private const string GeneralTab = "General";
        private const string SingleTab = "Single";
        private const string SceneTab = "Scene";
        private const string ScriptableTab = "Scriptable";
        private const string SaveKey = nameof(AutoLinkerEditor);
        private const string DefaultDirectory = "Assets/AutoLinkDependencies";
        private const string AutoGenerateFolderName = "AutoGenerated";
        private static readonly string AutoGenerateDirectory = $"{DefaultDirectory}/{AutoGenerateFolderName}";

        private readonly string[] _defaultDirectories = {DefaultDirectory, AutoGenerateDirectory};
        private readonly string[] _tabs = {GeneralTab, SingleTab, SceneTab, ScriptableTab};

        private AutoLinker _autoLinker;
        private Object _objectToLink;
        [SerializeField] private string[] additionalDirectories = {DefaultDirectory};
        [SerializeField] private int selectedTabs;
        [SerializeField] private bool shouldAutoCreateMissingInstance;
        [SerializeField] private bool shouldOverrideExistingValue;

        private string[] SearchDirectories => additionalDirectories.Union(_defaultDirectories).ToArray();

        [MenuItem("Noobnewbier/" + nameof(AutoLinker))]
        private static void ShowWindow()
        {
            var window = GetWindow<AutoLinkerEditor>();
            window.titleContent = new GUIContent(nameof(AutoLinker));
            window.Show();
        }

        private void OnEnable()
        {
            var data = EditorPrefs.GetString(SaveKey, JsonUtility.ToJson(this));
            if (_autoLinker == null) _autoLinker = new AutoLinker(SearchDirectories);

            JsonUtility.FromJsonOverwrite(data, this);
        }

        private void OnDisable()
        {
            var data = JsonUtility.ToJson(this);

            EditorPrefs.SetString(SaveKey, data);
        }

        private void OnGUI()
        {
            selectedTabs = GUILayout.Toolbar(selectedTabs, _tabs);

            if (IsOnTab(GeneralTab)) DrawGeneralTab();
            if (IsOnTab(SingleTab)) DrawSingleTab();
            if (IsOnTab(SceneTab)) DrawSceneTab();
            if (IsOnTab(ScriptableTab)) DrawScriptableTab();
        }

        private void DrawSceneTab()
        {
            GUILayout.Label("Active Scene", EditorStyles.boldLabel);
            if (GUILayout.Button("Link Active Scene"))
            {
                var scene = SceneManager.GetActiveScene();

                foreach (var rootGameObject in scene.GetRootGameObjects())
                foreach (var monoBehaviour in rootGameObject.GetComponentsInChildren<MonoBehaviour>())
                    InjectToObject(monoBehaviour);
            }
        }

        private void DrawGeneralTab()
        {
            GUILayout.Label("Base Settings", EditorStyles.boldLabel);
            shouldOverrideExistingValue = EditorGUILayout.Toggle("Override Existing Value", shouldOverrideExistingValue);
            shouldAutoCreateMissingInstance = EditorGUILayout.Toggle("Auto Generate Missing Instance", shouldAutoCreateMissingInstance);

            DrawDirectories();

            if (GUILayout.Button("Refresh Type Bucket")) _autoLinker.Refresh();
        }

        private void DrawDirectories()
        {
            EditorGUI.BeginChangeCheck();
            var serializedObject = new SerializedObject(this);
            DrawField(nameof(additionalDirectories), serializedObject);
            if (EditorGUI.EndChangeCheck())
            {
                serializedObject.ApplyModifiedProperties();
                _autoLinker.SetDirectories(additionalDirectories);
            }
        }

        private void DrawScriptableTab()
        {
            GUILayout.Label("All Scriptable", EditorStyles.boldLabel);

            if (GUILayout.Button("Link All Scriptable")) InjectToAllScriptableWithinSearchDirectory();
        }

        private void DrawSingleTab()
        {
            GUILayout.Label("Single Object", EditorStyles.boldLabel);

            EditorGUILayout.BeginHorizontal();
            _objectToLink = EditorGUILayout.ObjectField("To Link: ", _objectToLink, typeof(Object), true);
            EditorGUILayout.EndHorizontal();

            if (GUILayout.Button("Link")) InjectToObject(_objectToLink);
        }

        private bool IsOnTab(string tab) => selectedTabs == Array.IndexOf(_tabs, tab);

        private void InjectToObject(Object objectToLink)
        {
            foreach (var linkResult in _autoLinker.InjectToObject(objectToLink, shouldOverrideExistingValue))
                HandleLinkResult(linkResult);
        }

        private void InjectToAllScriptableWithinSearchDirectory()
        {
            foreach (var linkResult in _autoLinker.InjectToAllScriptableWithinSearchDirectory(shouldOverrideExistingValue))
                HandleLinkResult(linkResult);
        }

        private static void DrawField(string fieldName, SerializedObject serializedObject)
        {
            var serializedProperty = serializedObject.FindProperty(fieldName);
            EditorGUILayout.PropertyField(serializedProperty, true);
        }

        private void HandleLinkResult(LinkResult linkResult)
        {
            switch (linkResult.ResultType)
            {
                case LinkResultType.Success:
                    EditorUtility.SetDirty(linkResult.ObjectToLink);
                    Debug.Log(linkResult.Details, linkResult.ObjectToLink);
                    break;
                case LinkResultType.MoreThanOneInstance:
                    Debug.LogWarning(linkResult.Details, linkResult.ObjectToLink);
                    break;
                case LinkResultType.NoExistingObject:
                    Debug.LogWarning(linkResult.Details, linkResult.ObjectToLink);
                    if (shouldAutoCreateMissingInstance)
                    {
                        var newInstance = CreateInstance(linkResult.FieldInfo.FieldType);

                        if (!AssetDatabase.IsValidFolder(AutoGenerateDirectory)) AssetDatabase.CreateFolder(DefaultDirectory, AutoGenerateFolderName);
                        
                        AssetDatabase.CreateAsset(newInstance, $"{AutoGenerateDirectory}/{linkResult.FieldInfo.FieldType.Name}.asset");
                        _autoLinker.Refresh();
                        
                        InjectToObject(linkResult.ObjectToLink);
                    }

                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
    }
}